{"ast":null,"code":"var _jsxFileName = \"/Users/jonesveriatohoffstetter/ReactJs/conversor_react/src/components/Conversor2.js\";\nimport React, { Component } from 'react';\nimport Select from 'react-select';\nimport './Conversor2.css';\nimport allCurrency from './json';\nimport intl from 'react-intl-universal';\nconst locales = {\n  'pt-BR': require('../locales/pt-BR.json'),\n  'en-US': require('../locales/en-US.json')\n};\nexport default class Conversor2 extends Component {\n  constructor() {\n    super();\n\n    this.convert = () => {\n      if (!this.state.currency1 || !this.state.currency2 || !this.state.value) {\n        alert(intl.get('msg.fillallinputs'));\n      } else {\n        let from_to = `${this.state.currency1}_${this.state.currency2}`;\n        let url = `https://free.currconv.com/api/v7/convert?apiKey=02a0baf4414a654a31db&q=${from_to}&compact=y`; //console.log(url)\n\n        fetch(url).then(res => {\n          return res.json();\n        }).then(json => {\n          let cot = parseFloat(json[from_to].val); //console.log(this.state.value)\n\n          let val = parseFloat(this.state.value);\n          let result = val * cot;\n          result = result.toFixed(2);\n          this.setState({\n            result\n          });\n        });\n      }\n    };\n\n    this.state = {\n      value: '',\n      currency1: 0,\n      currency2: 0,\n      result: 0,\n      currencies: [],\n      iniValue: '{value: \"ALL\", label: \"ALL\"}'\n    };\n    const currentLocale = locales[navigator.language] ? navigator.language : 'pt-BR';\n    intl.init({\n      currentLocale,\n      locales\n    });\n  }\n\n  componentDidMount() {\n    //let url = 'https://free.currconv.com/api/v7/currencies?apiKey=02a0baf4414a654a31db'\n\n    /*fetch(url)\n      .then(res => {\n        return res.json()\n      })\n      .then(json => {\n        this.setState({ currencies: json })\n      })*/\n    let curr = Object.keys(allCurrency.results);\n    let currencies = curr.map(c => {\n      return {\n        value: c,\n        label: c\n      };\n    });\n    this.setState({\n      currencies\n    });\n  }\n\n  render() {\n    //console.log(options)\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conversor2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputs2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"text\",\n      onChange: ev => {\n        ev.persist();\n        const evnt = ev;\n        var val = evnt.target.value.replace(',', '.');\n        this.setState({\n          value: val\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"currencies\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Select //value={this.state.iniValue}\n    , {\n      placeholder: intl.get(\"currency.one\"),\n      className: \"select\",\n      onChange: ev => {\n        //console.log(ev)\n        this.setState({\n          currency1: ev.value\n        });\n      },\n      options: this.state.currencies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, \"->\"), /*#__PURE__*/React.createElement(Select //value={this.state.iniValue}\n    , {\n      placeholder: intl.get(\"currency.two\"),\n      className: \"select\",\n      onChange: ev => {\n        this.setState({\n          currency2: ev.value\n        });\n      },\n      options: this.state.currencies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"btn\",\n      onClick: this.convert,\n      type: \"button\",\n      value: intl.get(\"btn.convert\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"result\",\n      type: \"text\",\n      value: this.state.result,\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/jonesveriatohoffstetter/ReactJs/conversor_react/src/components/Conversor2.js"],"names":["React","Component","Select","allCurrency","intl","locales","require","Conversor2","constructor","convert","state","currency1","currency2","value","alert","get","from_to","url","fetch","then","res","json","cot","parseFloat","val","result","toFixed","setState","currencies","iniValue","currentLocale","navigator","language","init","componentDidMount","curr","Object","keys","results","map","c","label","render","ev","persist","evnt","target","replace"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Select from 'react-select'\nimport './Conversor2.css'\nimport allCurrency from './json'\nimport intl from 'react-intl-universal';\n\nconst locales = {\n  'pt-BR': require('../locales/pt-BR.json'),\n  'en-US': require('../locales/en-US.json')\n}\n\nexport default class Conversor2 extends Component {\n  constructor () {\n    super()\n    this.state = {\n      value: '',\n      currency1: 0,\n      currency2: 0,\n      result: 0,\n      currencies: [],\n      iniValue: '{value: \"ALL\", label: \"ALL\"}'\n    }\n     const currentLocale = locales[navigator.language]\n      ? navigator.language\n      : 'pt-BR'\n\n    intl.init({\n      currentLocale,\n      locales\n    })\n  }\n\n  componentDidMount () {\n    //let url = 'https://free.currconv.com/api/v7/currencies?apiKey=02a0baf4414a654a31db'\n    /*fetch(url)\n      .then(res => {\n        return res.json()\n      })\n      .then(json => {\n        this.setState({ currencies: json })\n      })*/\n\n    let curr = Object.keys(allCurrency.results)\n    let currencies = curr.map(c => {\n      return { value: c, label: c }\n    })\n    this.setState({ currencies })\n  }\n\n  convert = () => {\n    if (!this.state.currency1 || !this.state.currency2 || !this.state.value) {\n      alert(intl.get('msg.fillallinputs'))\n    } else {\n      let from_to = `${this.state.currency1}_${this.state.currency2}`\n      let url = `https://free.currconv.com/api/v7/convert?apiKey=02a0baf4414a654a31db&q=${from_to}&compact=y`\n      //console.log(url)\n\n      fetch(url)\n        .then(res => {\n          return res.json()\n        })\n        .then(json => {\n          let cot = parseFloat(json[from_to].val)\n          //console.log(this.state.value)\n          let val = parseFloat(this.state.value)\n          let result = val * cot\n          result = result.toFixed(2)\n          this.setState({ result })\n        })\n    }\n  }\n\n  render () {\n    //console.log(options)\n\n    return (\n      <div className='conversor2'>\n        <div className='inputs2'>\n          <input\n            className='input'\n            type='text'\n            onChange={ev => {\n              ev.persist()\n              const evnt = ev\n              var val = evnt.target.value.replace(',', '.')\n              this.setState({ value: val })\n            }}\n          ></input>\n          <div className='currencies'>\n            <Select\n              //value={this.state.iniValue}\n              placeholder={intl.get(\"currency.one\")}\n              className='select'\n              onChange={ev => {\n\n                //console.log(ev)\n                this.setState({ currency1: ev.value })\n              }}\n              options={this.state.currencies}\n            ></Select>\n            <h3 className='title2'>-></h3>\n            <Select\n              //value={this.state.iniValue}\n              placeholder={intl.get(\"currency.two\")}\n              className='select'\n              onChange={ev => {\n                this.setState({ currency2: ev.value })\n              }}\n              options={this.state.currencies}\n            ></Select>\n          </div>\n          <input\n            className='btn'\n            onClick={this.convert}\n            type='button'\n            value={intl.get(\"btn.convert\")}\n          ></input>\n          <input\n            className='result'\n            type='text'\n            value={this.state.result}\n            disabled={true}\n          ></input>\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}